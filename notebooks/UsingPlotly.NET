{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "surgical-forest",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "\r\n",
       "<div>\r\n",
       "    <div id='dotnet-interactive-this-cell-202.Microsoft.DotNet.Interactive.Http.HttpPort' style='display: none'>\r\n",
       "        The below script needs to be able to find the current output cell; this is an easy method to get it.\r\n",
       "    </div>\r\n",
       "    <script type='text/javascript'>\r\n",
       "async function probeAddresses(probingAddresses) {\r\n",
       "    function timeout(ms, promise) {\r\n",
       "        return new Promise(function (resolve, reject) {\r\n",
       "            setTimeout(function () {\r\n",
       "                reject(new Error('timeout'))\r\n",
       "            }, ms)\r\n",
       "            promise.then(resolve, reject)\r\n",
       "        })\r\n",
       "    }\r\n",
       "\r\n",
       "    if (Array.isArray(probingAddresses)) {\r\n",
       "        for (let i = 0; i < probingAddresses.length; i++) {\r\n",
       "\r\n",
       "            let rootUrl = probingAddresses[i];\r\n",
       "\r\n",
       "            if (!rootUrl.endsWith('/')) {\r\n",
       "                rootUrl = `${rootUrl}/`;\r\n",
       "            }\r\n",
       "\r\n",
       "            try {\r\n",
       "                let response = await timeout(1000, fetch(`${rootUrl}discovery`, {\r\n",
       "                    method: 'POST',\r\n",
       "                    cache: 'no-cache',\r\n",
       "                    mode: 'cors',\r\n",
       "                    timeout: 1000,\r\n",
       "                    headers: {\r\n",
       "                        'Content-Type': 'text/plain'\r\n",
       "                    },\r\n",
       "                    body: probingAddresses[i]\r\n",
       "                }));\r\n",
       "\r\n",
       "                if (response.status == 200) {\r\n",
       "                    return rootUrl;\r\n",
       "                }\r\n",
       "            }\r\n",
       "            catch (e) { }\r\n",
       "        }\r\n",
       "    }\r\n",
       "}\r\n",
       "\r\n",
       "function loadDotnetInteractiveApi() {\r\n",
       "    probeAddresses([\"http://10.0.13.104:1025/\", \"http://127.0.0.1:1025/\"])\r\n",
       "        .then((root) => {\r\n",
       "        // use probing to find host url and api resources\r\n",
       "        // load interactive helpers and language services\r\n",
       "        let dotnetInteractiveRequire = require.config({\r\n",
       "        context: '202.Microsoft.DotNet.Interactive.Http.HttpPort',\r\n",
       "                paths:\r\n",
       "            {\r\n",
       "                'dotnet-interactive': `${root}resources`\r\n",
       "                }\r\n",
       "        }) || require;\r\n",
       "\r\n",
       "            window.dotnetInteractiveRequire = dotnetInteractiveRequire;\r\n",
       "\r\n",
       "            window.configureRequireFromExtension = function(extensionName, extensionCacheBuster) {\r\n",
       "                let paths = {};\r\n",
       "                paths[extensionName] = `${root}extensions/${extensionName}/resources/`;\r\n",
       "                \r\n",
       "                let internalRequire = require.config({\r\n",
       "                    context: extensionCacheBuster,\r\n",
       "                    paths: paths,\r\n",
       "                    urlArgs: `cacheBuster=${extensionCacheBuster}`\r\n",
       "                    }) || require;\r\n",
       "\r\n",
       "                return internalRequire\r\n",
       "            };\r\n",
       "        \r\n",
       "            dotnetInteractiveRequire([\r\n",
       "                    'dotnet-interactive/dotnet-interactive'\r\n",
       "                ],\r\n",
       "                function (dotnet) {\r\n",
       "                    dotnet.init(window);\r\n",
       "                },\r\n",
       "                function (error) {\r\n",
       "                    console.log(error);\r\n",
       "                }\r\n",
       "            );\r\n",
       "        })\r\n",
       "        .catch(error => {console.log(error);});\r\n",
       "    }\r\n",
       "\r\n",
       "// ensure `require` is available globally\r\n",
       "if ((typeof(require) !==  typeof(Function)) || (typeof(require.config) !== typeof(Function))) {\r\n",
       "    let require_script = document.createElement('script');\r\n",
       "    require_script.setAttribute('src', 'https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js');\r\n",
       "    require_script.setAttribute('type', 'text/javascript');\r\n",
       "    \r\n",
       "    \r\n",
       "    require_script.onload = function() {\r\n",
       "        loadDotnetInteractiveApi();\r\n",
       "    };\r\n",
       "\r\n",
       "    document.getElementsByTagName('head')[0].appendChild(require_script);\r\n",
       "}\r\n",
       "else {\r\n",
       "    loadDotnetInteractiveApi();\r\n",
       "}\r\n",
       "\r\n",
       "    </script>\r\n",
       "</div>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "Installed package Plotly.NET version 2.0.0-beta6"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "Installed package Plotly.NET.Interactive version 2.0.0-beta6"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "Installed package System.CommandLine version 2.0.0-beta1.20574.7"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "Installed package FSharp.Compiler.Service version 39.0.0"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "Loaded Plotly.NET.Interactive.FormatterKernelExtension"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/markdown": [
       "Added Kernel Extension including formatters for GenericChart"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#r \"nuget: FSharp.Compiler.Service,*-*\"\n",
    "#r \"nuget: System.CommandLine,*-*\"\n",
    "#r \"nuget: Plotly.NET,2.0.0-beta6\"\n",
    "#r \"nuget: Plotly.NET.Interactive,2.0.0-beta6\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "harmful-selection",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Installed package DwC-A_dotnet version 0.5.1"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "Installed package DwC-A_dotnet.Interactive version 0.1.1-pre"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "Loaded DwC_A_dotnet.Interactive.DwCKernelExtension"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#r \"nuget:DwC-A_dotnet,0.5.1\"\n",
    "#r \"nuget:DwC-A_dotnet.Interactive,0.1.1-Pre\"\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "several-pursuit",
   "metadata": {},
   "outputs": [],
   "source": [
    "using DwC_A;\n",
    "\n",
    "var archive = new ArchiveReader(@\"./data/dwca-rooftop-v1.4\");"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "weekly-permission",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div id=\"1a231482-db25-4bd6-a01c-81433bb25f30\" style=\"width: 1100px; height: 500px;\"><!-- Plotly chart will be drawn inside this DIV --></div>\n",
       "<script type=\"text/javascript\">\n",
       "\n",
       "            var renderPlotly_1a231482db254bd6a01c81433bb25f30 = function() {\n",
       "            var fsharpPlotlyRequire = requirejs.config({context:'fsharp-plotly',paths:{plotly:'https://cdn.plot.ly/plotly-latest.min'}}) || require;\n",
       "            fsharpPlotlyRequire(['plotly'], function(Plotly) {\n",
       "\n",
       "            var data = [{\"type\":\"bar\",\"x\":[\"Abrostola\",\"Acronicta\",\"Agrotis\",\"Apamea\",\"Aphomia\",\"Aplocera\",\"Argyresthia\",\"Biston\",\"Blastodacna\",\"Borkhausenia\",\"Campaea\",\"Capua\",\"Charanycha\",\"Chiasmia\",\"Chloroclysta\",\"Chrysoteuchia\",\"Cochylis\",\"Coleophora\",\"Cydia\",\"Dichelia\",\"Dioryctria\",\"Discestra\",\"Earias\",\"Ectoedemia\",\"Enarmonia\",\"Endrosis\",\"Epiblema\",\"Eudonia\",\"Eupithecia\",\"Furcula\",\"Glyphipterix\",\"Hedya\",\"Hofmannophila\",\"Idaea\",\"Lacanobia\",\"Leucospilapteryx\",\"Lomaspilis\",\"Mamestra\",\"Mompha\",\"Nemapogon\",\"Notocelia\",\"Oligia\",\"Opisthograptis\",\"Pammene\",\"Pandemis\",\"Paradrina\",\"Parornix\",\"Phyllonorycter\",\"Pseudargyrotoza\",\"Pyrrhia\",\"Rhyacionia\",\"Stigmella\",\"Teleiodes\",\"Thera\",\"Tinea\",\"Tortrix\",\"Xanthorhoe\",null],\"y\":[1,1,28,3,1,1,7,2,1,2,2,1,3,1,1,1,1,10,1,1,1,2,1,3,1,5,1,1,8,1,1,8,4,1,2,1,1,1,2,1,3,3,3,1,7,5,1,122,6,1,2,3,3,5,3,1,7,19],\"marker\":{}}];\n",
       "            var layout = {\"width\":1100.0,\"height\":500.0,\"title\":\"urn:zmuc:1999-06-14/1999-06-16\"};\n",
       "            var config = {};\n",
       "            Plotly.newPlot('1a231482-db25-4bd6-a01c-81433bb25f30', data, layout, config);\n",
       "});\n",
       "            };\n",
       "            if ((typeof(requirejs) !==  typeof(Function)) || (typeof(requirejs.config) !== typeof(Function))) {\n",
       "                var script = document.createElement(\"script\");\n",
       "                script.setAttribute(\"src\", \"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\");\n",
       "                script.onload = function(){\n",
       "                    renderPlotly_1a231482db254bd6a01c81433bb25f30();\n",
       "                };\n",
       "                document.getElementsByTagName(\"head\")[0].appendChild(script);\n",
       "            }\n",
       "            else {\n",
       "                renderPlotly_1a231482db254bd6a01c81433bb25f30();\n",
       "            }\n",
       "</script>\n"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "using Plotly.NET;\n",
    "using DwC_A.Terms;\n",
    "\n",
    "var eventID = archive.CoreFile.DataRows\n",
    "    .Skip(5)  //Change this number and run the cell again and you see the chart for a new eventID\n",
    "    .Take(1)\n",
    "    .First()[Terms.eventID];\n",
    "var occurrences = archive.Extensions.GetFileReaderByFileName(\"occurrence.txt\");\n",
    "\n",
    "var dataSeries = occurrences.DataRows\n",
    "    .Where(n => n[Terms.eventID] == eventID)\n",
    "    .GroupBy(n => n[Terms.genus])\n",
    "    .Select(g => \n",
    "        Tuple.Create(g.First()[Terms.genus],\n",
    "            g.Sum(c => int.Parse(c[Terms.individualCount]))));\n",
    "\n",
    "var chart = Plotly.NET.Chart.Column<string, int, int>(dataSeries);\n",
    "var layout = new Plotly.NET.Layout();\n",
    "chart.WithSize(1100, 500)\n",
    "    .WithTitle(eventID);\n",
    "chart"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": ".NET (C#)",
   "language": "C#",
   "name": ".net-csharp"
  },
  "language_info": {
   "file_extension": ".cs",
   "mimetype": "text/x-csharp",
   "name": "C#",
   "pygments_lexer": "csharp",
   "version": "8.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
